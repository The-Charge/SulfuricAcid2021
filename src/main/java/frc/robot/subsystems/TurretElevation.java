// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpiutil.math.MathUtil;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Servo;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TurretElevation extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Servo elevationServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Mechanical constants (mm)
    private static final double SIDE_A = 244.475;
    private static final double SIDE_B = 369.4176;

    /**
    *
    */
    public TurretElevation() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevationServo = new Servo(0);
        addChild("elevationServo", elevationServo);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Turret Elevation/currentExtension", elevationServo.get());
        SmartDashboard.putNumber("Turret Elevation/currentAngle", currentAngle());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public double currentAngle() {
        return extensionToAngle(elevationServo.get());
    }

    public void setRawExtension(double extension) {
        // FIXME: last year we discovered that [0, 1] wasn't actually the range of the
        // turret. Due to a mechanical constraint (maybe?) we had to lerp it between [a,
        // b]. Dig through the commits to find out what the constants were
        elevationServo.set(extension);
    }

    public void setAngle(double angle) {
        setRawExtension(angleToExtension(angle));
    }

    /**
     * Calculate the raw extension needed to raise the turret to a given angle
     * (untested and unused last year)
     * 
     * @param angle in degrees
     * @return extension clamped in the range [0, 1]
     */
    private double angleToExtension(double angle) {
        // Running law of cosines on the turret. The 94.4 is because the turret isn't
        // level with the horizontal
        double d = Math.sqrt(Math.pow(SIDE_A, 2) + Math.pow(SIDE_B, 2)
                - 2 * SIDE_A * SIDE_B * Math.cos(Math.toRadians(94.4 - angle)));

        // This line subtracts the length of the actuator while not extended
        d -= 218; // 218 is what the actuator blueprints says is the "Closed Length (hole to
                  // hole)"
        // This line changes the normalization from 0-140 to 0-1
        d /= 140; // 140 is what the actuator blueprints says is the max the actuator can extend
                  // from the base
        return MathUtil.clamp(d, 0, 1);
    }

    /**
     * Calculate the angle given by an extension using the inverse of
     * {@link #angleToExtension(double)}
     * 
     * @param extension in the range [0, 1]
     * @return angle in degrees
     */
    private double extensionToAngle(double extension) {
        extension = extension * 140 + 218;
        return 94.4 - Math.toDegrees(Math
                .acos((Math.pow(SIDE_A, 2) + Math.pow(SIDE_B, 2) - Math.pow(extension, 2)) / (2 * SIDE_A * SIDE_B)));
    }
}
