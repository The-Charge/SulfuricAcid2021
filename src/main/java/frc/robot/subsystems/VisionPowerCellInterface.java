// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.LinearFilter;
import edu.wpi.first.wpilibj.MedianFilter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class VisionPowerCellInterface extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final int AVERAGE_FPS_WINDOW_SIZE = 30;

    private double[] targetArray;

    private LinearFilter averageFPSFilter;
    private double averageFPS;

    /**
    *
    */
    public VisionPowerCellInterface() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        averageFPSFilter = LinearFilter.movingAverage(AVERAGE_FPS_WINDOW_SIZE);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

        targetArray = SmartDashboard.getNumberArray("Vision/" + Key.NAME, Key.DEFAULT);
        averageFPS = averageFPSFilter.calculate(get(Key.INSTANT_FPS));
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public enum Key {
        TIMESTAMP(0), SUCCESS(1), HORIZONTAL_OFFSET(2), VERTICAL_OFFSET(3), INSTANT_FPS(4), AVERAGE_FPS(-1);

        public final int value;

        private static final double[] DEFAULT = new double[] { 0, 0, 0, 0, 0 };
        private static final String NAME = "powerCellArray";

        private Key(int value) {
            this.value = value;
        }
    }

    /**
     * Get a value from the vision power cell array
     * 
     * @param key name of value to get (not index)
     * @return value as a double, with booleans stored as 0 or 1
     */
    public double get(Key key) {
        // Override for filtered values
        if (key == Key.AVERAGE_FPS) {
            return averageFPS;
        }

        // Fallback on the array
        return targetArray[key.value];
    }
}
