// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    private final Turret m_turret = new Turret();
    private final Stopper m_stopper = new Stopper();
    private final Shooter m_shooter = new Shooter();
    private final Shifters m_shifters = new Shifters();
    private final Lights m_lights = new Lights();
    private final Intake m_intake = new Intake();
    private final Indexer m_indexer = new Indexer();
    private final Drivetrain m_drivetrain = new Drivetrain();
    private final Cooling m_cooling = new Cooling();
    private final ControlPanel m_controlPanel = new ControlPanel();
    private final ColorSensor m_colorSensor = new ColorSensor();
    private final Climber m_climber = new Climber();
    private final BallSensor m_ballSensor = new BallSensor();

// Joysticks

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("AutonomousCorner", new AutonomousCorner( m_drivetrain ));
    SmartDashboard.putData("AutonomousCorner2", new AutonomousCorner2( m_drivetrain ));
    SmartDashboard.putData("AutonomousPortTR", new AutonomousPortTR( m_drivetrain ));
    SmartDashboard.putData("AutonomousPortTR2", new AutonomousPortTR2( m_drivetrain ));
    SmartDashboard.putData("AutonomousForward", new AutonomousForward( m_drivetrain ));
    SmartDashboard.putData("AutonomousBackward", new AutonomousBackward( m_drivetrain ));
    SmartDashboard.putData("AutonomousBackwardS2", new AutonomousBackwardS2( m_drivetrain ));
    SmartDashboard.putData("AutonomousBackwardS", new AutonomousBackwardS( m_drivetrain ));
    SmartDashboard.putData("AutonomousNew", new AutonomousNew( m_drivetrain ));
    SmartDashboard.putData("GalacticSearchRedA", new GalacticSearchRedA( m_drivetrain ));
    SmartDashboard.putData("GalacticSearchRedB", new GalacticSearchRedB( m_drivetrain ));
    SmartDashboard.putData("GalacticSearchBlueB", new GalacticSearchBlueB( m_drivetrain ));
    SmartDashboard.putData("GalacticSearchBlueA", new GalacticSearchBlueA( m_drivetrain ));
    SmartDashboard.putData("BarrelRacing", new BarrelRacing( m_drivetrain ));
    SmartDashboard.putData("Slalom", new Slalom( m_drivetrain ));
    SmartDashboard.putData("Bounce", new Bounce( m_drivetrain ));
    SmartDashboard.putData("AutonCommandFactory", new AutonCommandFactory());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_turret.setDefaultCommand(new RunTurretVision(0, m_turret) );
    m_lights.setDefaultCommand(new ChangeLights( m_lights ) );
    m_drivetrain.setDefaultCommand(new TankDrive( m_drivetrain ) );
    m_cooling.setDefaultCommand(new Cool( m_cooling ) );
    m_colorSensor.setDefaultCommand(new SenseColor( m_colorSensor ) );


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("AutonomousCorner", new AutonomousCorner( m_drivetrain ));
    m_chooser.addOption("AutonomousCorner2", new AutonomousCorner2( m_drivetrain ));
    m_chooser.addOption("AutonomousPortTR", new AutonomousPortTR( m_drivetrain ));
    m_chooser.addOption("AutonomousPortTR2", new AutonomousPortTR2( m_drivetrain ));
    m_chooser.addOption("AutonomousForward", new AutonomousForward( m_drivetrain ));
    m_chooser.addOption("AutonomousBackward", new AutonomousBackward( m_drivetrain ));
    m_chooser.addOption("AutonomousBackwardS2", new AutonomousBackwardS2( m_drivetrain ));
    m_chooser.addOption("AutonomousBackwardS", new AutonomousBackwardS( m_drivetrain ));
    m_chooser.addOption("AutonomousNew", new AutonomousNew( m_drivetrain ));
    m_chooser.addOption("GalacticSearchRedA", new GalacticSearchRedA( m_drivetrain ));
    m_chooser.addOption("GalacticSearchRedB", new GalacticSearchRedB( m_drivetrain ));
    m_chooser.addOption("GalacticSearchBlueB", new GalacticSearchBlueB( m_drivetrain ));
    m_chooser.addOption("GalacticSearchBlueA", new GalacticSearchBlueA( m_drivetrain ));
    m_chooser.addOption("BarrelRacing", new BarrelRacing( m_drivetrain ));
    m_chooser.addOption("Slalom", new Slalom( m_drivetrain ));
    m_chooser.addOption("Bounce", new Bounce( m_drivetrain ));
    m_chooser.setDefaultOption("PlaceHolderAuton", new PlaceHolderAuton());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  
  public Intake getIntake(){
    return m_intake;
  }

}

